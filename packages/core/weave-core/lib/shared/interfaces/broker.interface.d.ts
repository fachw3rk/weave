import { EventEmitter2 as EventEmitter } from 'eventemitter2';
import { WeaveError } from "../../errors";
import { ActionOptions } from "../types/action.type";
import { EventOptions } from "../types/event-options.type";
import { PingResult } from '../types/ping-result.type';
import { BrokerOptions } from "./broker-options.interface";
import { Cache } from './cache.interface';
import { ContextFactory } from './context-factory.interface';
import { Endpoint } from "./endpoint.interface";
import { Logger } from "./logger.interface";
import { MetricRegistry } from "./metric-registry.interface";
import { Registry } from "./registry.interface";
import { ServiceSchema } from "./service-schema.interface";
import { Service } from "./service.interface";
import { Tracer } from "./tracer.interface";
import { Transport } from './transport.interface';
export interface Broker {
    nodeId: string;
    namespace?: string;
    bus: EventEmitter;
    version: string;
    options: BrokerOptions;
    metrics?: MetricRegistry;
    start(): Promise<any>;
    stop(): Promise<any>;
    createService(serviceSchema: ServiceSchema): Service;
    loadService(path: string): void;
    loadServices(folderPath: string, fileMask?: string): void;
    contextFactory: ContextFactory;
    isStarted: Boolean;
    log: Logger;
    createLogger(moduleName: String, service?: Service): Logger;
    cache?: Cache;
    getUUID(): string;
    health: any;
    registry: Registry;
    tracer?: Tracer;
    transport?: Transport;
    getNextActionEndpoint(actionName: string, nodeId?: string): Endpoint | WeaveError;
    call(actionName: string, data: Object, options: ActionOptions): Promise<any>;
    multiCall(actions: Array<any>): Promise<Array<any>>;
    emit(eventName: string, data: Object, options?: EventOptions): Promise<any>;
    broadcast(eventName: string, data: Object, options?: EventOptions): Promise<any>;
    broadcastLocal(eventName: string, data: Object, options?: EventOptions): Promise<any>;
    waitForServices(serviceNames: Array<string>, timeout?: number, interval?: number): Promise<any>;
    ping(nodeId: string, timeout?: number): Promise<PingResult>;
    handleError(error: Error): void;
    fatalError(message: string, error: Error, killProcess: Boolean): void;
}
